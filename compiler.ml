#use "code-gen.ml";;

let file_to_string f =
  let ic = open_in f in
  let s = really_input_string ic (in_channel_length ic) in
  close_in ic;
  s;;

let string_to_asts s =  List.map Semantics.run_semantics
                             (Tag_Parser.tag_parse_expressions
                             (Reader.read_sexprs s))

let primitive_names_to_labels = 
  ["boolean?", "is_boolean"; "float?", "is_float"; "integer?", "is_integer"; "pair?", "is_pair";
   "null?", "is_null"; "char?", "is_char"; "vector?", "is_vector"; "string?", "is_string";
   "procedure?", "is_procedure"; "symbol?", "is_symbol"; "string-length", "string_length";
   "string-ref", "string_ref"; "string-set!", "string_set"; "make-string", "make_string";
   "vector-length", "vector_length"; "vector-ref", "vector_ref"; "vector-set!", "vector_set";
   "make-vector", "make_vector"; "symbol->string", "symbol_to_string"; 
   "char->integer", "char_to_integer"; "integer->char", "integer_to_char"; "eq?", "is_eq";
   "+", "bin_add"; "*", "bin_mul"; "-", "bin_sub"; "/", "bin_div"; "<", "bin_lt"; "=", "bin_equ"
    ;"car","car";"cdr","cdr";"set-car!","set_car";"set-cdr!" ,"set_cdr";"cons","cons";"apply","apply"(* you can add yours here *)];;

    
let rec get_offset_of_const list2 sexpr1=
    match sexpr1 with 
    | Sexpr(x)->  let (a,(number,b))=(List.hd list2) in
      (match a with 
      |Void -> get_offset_of_const (List.tl list2) sexpr1
      | Sexpr(a)->
        (match sexpr_eq a x with 
        | true->  number
        | false-> get_offset_of_const (List.tl list2) sexpr1))
    | Void-> raise X_this_should_not_happen;;

let rec get_offset_of_freevar list2 const=
   let (a,b)=List.hd list2 in if (String.equal a const) then (b) else ( get_offset_of_freevar (List.tl list2) const);;
    
    

let make_prologue consts_tbl fvars_tbl =
  let get_const_address const = match const with
                               | Void -> "const_tbl+0"
                               | Sexpr(Nil) -> "const_tbl+1"
                               | Sexpr(Bool true) -> "const_tbl+2"
                               | Sexpr(Bool false) -> "const_tbl+4"
                               | _ -> "const_tbl+"^(string_of_int (get_offset_of_const consts_tbl const)) in

  let get_fvar_address const =  "FVAR("^string_of_int(get_offset_of_freevar fvars_tbl const)^")" in
  let make_primitive_closure (prim, label) =
"    MAKE_CLOSURE(rax, SOB_NIL, " ^ label  ^ ")
    mov " ^ (get_fvar_address prim)  ^ ", rax" in
  let make_constant (c, (a, s)) = s in
  
"
;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include \"compiler.s\"

section .bss
malloc_pointer:
    resq 1

section .data
const_tbl:
" ^ (String.concat "\n" (List.map make_constant consts_tbl)) ^ "

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID " ^ get_const_address Void ^ "
%define SOB_NIL " ^ get_const_address (Sexpr Nil) ^ "
%define SOB_TRUE " ^ get_const_address (Sexpr (Bool true)) ^ "
%define SOB_FALSE " ^ get_const_address (Sexpr (Bool false)) ^ "

fvar_tbl:
" ^ (String.concat "\n" (List.map (fun _ -> "dq T_UNDEFINED") fvars_tbl)) ^ "

global main

section .text
main:
    ;; set up the heap
    mov rdi, GB(4)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0
    push qword SOB_NIL
    push qword T_UNDEFINED
    push rsp

    call code_fragment
    add rsp, 4*8
    ret

code_fragment:
    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we emulate the missing (define ...) expressions
    ;; for all the primitive procedures.
" ^ (String.concat "\n" (List.map make_primitive_closure primitive_names_to_labels)) ^ "
 
";;

let epilogue =  "" ;;

exception X_missing_input_file;;

try
let unique = 
  let last = ref 0 in fun () -> incr last ; !last in
  let infile = Sys.argv.(1) in
  let code =   (file_to_string "stdlib.scm") ^  (file_to_string infile) in
  let asts = string_to_asts code in
  let consts_tbl = Code_Gen.make_consts_tbl asts  in
  let fvars_tbl =  Code_Gen.make_fvars_tbl asts  in
  let generate = (Code_Gen.generate consts_tbl fvars_tbl)  in
  let code_fragment = String.concat "\n\n"
                        (List.map
                           (fun ast -> (generate ast (unique()) 0) ^ "\n    call write_sob_if_not_void")
                           asts) in
  let provided_primitives = file_to_string "prims.s" in
                   
  print_string ((make_prologue consts_tbl fvars_tbl)  ^
                  code_fragment ^ "\nret\n" ^
                    provided_primitives ^ "\n" ^ epilogue)

with Invalid_argument(x) -> raise X_missing_input_file;;